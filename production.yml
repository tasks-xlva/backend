version: '3.9'

services:
  postgres:
    image: postgres:13-alpine
    restart: unless-stopped
    env_file:
      - ./.envs/.production/.postgres.env
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: pg_isready -d tasks
      interval: 5s
      timeout: 5s
      retries: 5

  django:
    depends_on:
      - postgres
    build:
      context: .
      dockerfile: compose/django/dockerfile
    environment:
      - DJANGO_SETTINGS_MODULE=app.settings.production
    env_file:
      - ./.envs/.production/.postgres.env
    command: >
      bash -c "python manage.py migrate
      && python manage.py runserver 0.0.0.0:80 --noreload"
    volumes:
      - python_env:/app/env
      - media:/app/media
    expose:
      - 80

  nginx:
    depends_on:
      - django
    image: nginx:alpine
    restart: unless-stopped
    volumes:
      - ./compose/nginx:/etc/nginx/conf.d
      - ./.certbot/conf:/etc/letsencrypt
      - ./.certbot/www:/var/www/certbot
    ports:
      - "80:80"
      - "443:443"
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"

  certbot:
    image: certbot/certbot
    restart: unless-stopped
    volumes:
      - ./.certbot/conf:/etc/letsencrypt
      - ./.certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"


volumes:
  postgres_data:
  python_env:
  media:
